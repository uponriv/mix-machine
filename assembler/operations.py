# operations.py

# maps instruction to (C_CODE, F_CODE)
_instructions = {
    "NOP": (0, 0, False),
    "ADD": (1, 5, False),
    "FADD": (1, 6, True),
    "SUB": (2, 5, False),
    "FSUB": (2, 6, True),
    "MUL": (3, 5, False),
    "FMUL": (3, 6, True),
    "DIV": (4, 5, False),
    "FDIV": (4, 6, True),
    "NUM": (5, 0, True),
    "CHAR": (5, 1, True),
    "HLT": (5, 2, True),
    "FLOT": (5, 6, True),
    "FIX": (5, 7, True),
    "SLA": (6, 0, True),
    "SRA": (6, 1, True),
    "SLAX": (6, 2, True),
    "SRAX": (6, 3, True),
    "SLC": (6, 4, True),
    "SRC": (6, 5, True),
    "SLB": (6, 6, True),
    "SRB": (6, 7, True),
    "MOVE": (7, 1, False),
    "LDA": (8, 5, False),
    "LD1": (9, 5, False),
    "LD2": (10, 5, False),
    "LD3": (11, 5, False),
    "LD4": (12, 5, False),
    "LD5": (13, 5, False),
    "LD6": (14, 5, False),
    "LDX": (15, 5, False),
    "LDAN": (16, 5, False),
    "LD1N": (17, 5, False),
    "LD2N": (18, 5, False),
    "LD3N": (19, 5, False),
    "LD4N": (20, 5, False),
    "LD5N": (21, 5, False),
    "LD6N": (22, 5, False),
    "LDXN": (23, 5, False),
    "STA": (24, 5, False),
    "ST1": (25, 5, False),
    "ST2": (26, 5, False),
    "ST3": (27, 5, False),
    "ST4": (28, 5, False),
    "ST5": (29, 5, False),
    "ST6": (30, 5, False),
    "STX": (31, 5, False),
    "STJ": (32, 2, False),
    "STZ": (33, 5, False),
    "JBUS": (34, 0, False),
    "IOC": (35, 0, False),
    "IN": (36, 0, False),
    "OUT": (37, 0, False),
    "JRED": (38, 0, False),
    "JMP": (39, 0, True),
    "JSJ": (39, 1, True),
    "JOV": (39, 2, True),
    "JNOV": (39, 3, True),
    "JL": (39, 4, True),
    "JE": (39, 5, True),
    "JG": (39, 6, True),
    "JGE": (39, 7, True),
    "JNE": (39, 8, True),
    "JLE": (39, 9, True),
    "JAN": (40, 0, True),
    "JAZ": (40, 1, True),
    "JAP": (40, 2, True),
    "JANN": (40, 3, True),
    "JANZ": (40, 4, True),
    "JANP": (40, 5, True),
    "JAE": (40, 6, True),
    "JAO": (40, 7, True),
    "J1N": (41, 0, True),
    "J1Z": (41, 1, True),
    "J1P": (41, 2, True),
    "J1NN": (41, 3, True),
    "J1NZ": (41, 4, True),
    "J1NP": (41, 5, True),
    "J2N": (42, 0, True),
    "J2Z": (42, 1, True),
    "J2P": (42, 2, True),
    "J2NN": (42, 3, True),
    "J2NZ": (42, 4, True),
    "J2NP": (42, 5, True),
    "J3N": (43, 0, True),
    "J3Z": (43, 1, True),
    "J3P": (43, 2, True),
    "J3NN": (43, 3, True),
    "J3NZ": (43, 4, True),
    "J3NP": (43, 5, True),
    "J4N": (44, 0, True),
    "J4Z": (44, 1, True),
    "J4P": (44, 2, True),
    "J4NN": (44, 3, True),
    "J4NZ": (44, 4, True),
    "J4NP": (44, 5, True),
    "J5N": (45, 0, True),
    "J5Z": (45, 1, True),
    "J5P": (45, 2, True),
    "J5NN": (45, 3, True),
    "J5NZ": (45, 4, True),
    "J5NP": (45, 5, True),
    "J6N": (46, 0, True),
    "J6Z": (46, 1, True),
    "J6P": (46, 2, True),
    "J6NN": (46, 3, True),
    "J6NZ": (46, 4, True),
    "J6NP": (46, 5, True),
    "JXN": (47, 0, True),
    "JXZ": (47, 1, True),
    "JXP": (47, 2, True),
    "JXNN": (47, 3, True),
    "JXNZ": (47, 4, True),
    "JXNP": (47, 5, True),
    "JXE": (47, 6, True),
    "JXO": (47, 7, True),
    "INCA": (48, 0, True),
    "DECA": (48, 1, True),
    "ENTA": (48, 2, True),
    "ENNA": (48, 3, True),
    "INC1": (49, 0, True),
    "DEC1": (49, 1, True),
    "ENT1": (49, 2, True),
    "ENN1": (49, 3, True),
    "INC2": (50, 0, True),
    "DEC2": (50, 1, True),
    "ENT2": (50, 2, True),
    "ENN2": (50, 3, True),
    "INC3": (51, 0, True),
    "DEC3": (51, 1, True),
    "ENT3": (51, 2, True),
    "ENN3": (51, 3, True),
    "INC4": (52, 0, True),
    "DEC4": (52, 1, True),
    "ENT4": (52, 2, True),
    "ENN4": (52, 3, True),
    "INC5": (53, 0, True),
    "DEC5": (53, 1, True),
    "ENT5": (53, 2, True),
    "ENN5": (53, 3, True),
    "INC6": (54, 0, True),
    "DEC6": (54, 1, True),
    "ENT6": (54, 2, True),
    "ENN6": (54, 3, True),
    "INCX": (55, 0, True),
    "DECX": (55, 1, True),
    "ENTX": (55, 2, True),
    "ENNX": (55, 3, True),
    "CMPA": (56, 5, False),
    "FCMP": (56, 6, True),
    "CMP1": (57, 5, False),
    "CMP2": (58, 5, False),
    "CMP3": (59, 5, False),
    "CMP4": (60, 5, False),
    "CMP5": (61, 5, False),
    "CMP6": (62, 5, False),
    "CMPX": (63, 5, False)
}

_directives = ("EQU", "ORIG", "END", "CON", "ALF")

_valid_stuff = set(_instructions.keys()) | set(_directives)


def is_valid_operation(operation):
    return operation.upper() in _valid_stuff


def is_instruction(operation):
    return operation.upper() in _instructions


def is_arg_required(operation):
    return operation.upper() in _directives and operation.upper() != "ALF"


def is_field_fixed(operation):
    if operation.upper() in _instructions:
        return _instructions[operation.upper()][2]
    else:
        return False


def get_codes(instr):
    try:
        return tuple(_instructions[instr][:2])
    except:
        return (None, 5)
